<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Logger.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Logger.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Oct 21 12:44:18 2019
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
setLoggerTime &rArr; setUtcDateTime &rArr; mktime &rArr; _localtime
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[29]">DMA_ADC0_Int_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">DMA_ADC0_Int_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ADC0_Int_Handler</a> from main.o(i.ADC0_Int_Handler) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[17]">ADC1_Int_Handler</a> from main.o(i.ADC1_Int_Handler) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[29]">DMA_ADC0_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[2a]">DMA_ADC1_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[28]">DMA_DAC_Out_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[1f]">DMA_Err_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[27]">DMA_I2C0_MRX_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[26]">DMA_I2C0_MTX_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[25]">DMA_I2C0_SRX_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[24]">DMA_I2C0_STX_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[2b]">DMA_SINC2_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[21]">DMA_SPI1_RX_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[20]">DMA_SPI1_TX_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[23]">DMA_UART_RX_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[22]">DMA_UART_TX_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[b]">Ext_Int0_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[c]">Ext_Int1_Handler</a> from main.o(i.Ext_Int1_Handler) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[d]">Ext_Int2_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[e]">Ext_Int3_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[f]">Ext_Int4_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[10]">Ext_Int5_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[11]">Ext_Int6_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[12]">Ext_Int7_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[19]">Flsh_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[14]">GP_Tmr0_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[15]">GP_Tmr1_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[1e]">I2C0_Master_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[1d]">I2C0_Slave_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[2d]">PWM0_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[2e]">PWM1_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[2f]">PWM2_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[2c]">PWMTRIP_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[18]">SINC2_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[1b]">SPI0_Int_Handler</a> from main.o(i.SPI0_Int_Handler) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[1c]">SPI1_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from main.o(i.SysTick_Handler) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[31]">SystemInitForLowPower</a> from system_aducm360.o(i.SystemInitForLowPower) referenced from startup_aducm360.o(.text)
 <LI><a href="#[1a]">UART_Int_Handler</a> from main.o(i.UART_Int_Handler) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[13]">WDog_Tmr_Int_Handler</a> from startup_aducm360.o(.text) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[a]">WakeUp_Int_Handler</a> from main.o(i.WakeUp_Int_Handler) referenced from startup_aducm360.o(RESET)
 <LI><a href="#[32]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_aducm360.o(.text)
 <LI><a href="#[33]">_sputc</a> from printf6.o(i._sputc) referenced from printf6.o(i.__0sprintf$6)
 <LI><a href="#[34]">addrError</a> from main.o(i.addrError) referenced from main.o(.constdata)
 <LI><a href="#[39]">clrLoggerFlash</a> from main.o(i.clrLoggerFlash) referenced from main.o(.constdata)
 <LI><a href="#[35]">cmdError</a> from main.o(i.cmdError) referenced from main.o(.constdata)
 <LI><a href="#[38]">getLoggerData</a> from main.o(i.getLoggerData) referenced from main.o(.constdata)
 <LI><a href="#[3c]">getLoggerLimits</a> from main.o(i.getLoggerLimits) referenced from main.o(.constdata)
 <LI><a href="#[3d]">getLoggerPeriod</a> from main.o(i.getLoggerPeriod) referenced from main.o(.constdata)
 <LI><a href="#[37]">getLoggerTime</a> from main.o(i.getLoggerTime) referenced from main.o(.constdata)
 <LI><a href="#[30]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3f]">resetTestMode</a> from main.o(i.resetTestMode) referenced from main.o(.constdata)
 <LI><a href="#[3a]">setLoggerLimits</a> from main.o(i.setLoggerLimits) referenced from main.o(.constdata)
 <LI><a href="#[3b]">setLoggerPeriod</a> from main.o(i.setLoggerPeriod) referenced from main.o(.constdata)
 <LI><a href="#[36]">setLoggerTime</a> from main.o(i.setLoggerTime) referenced from main.o(.constdata)
 <LI><a href="#[3e]">setTestMode</a> from main.o(i.setTestMode) referenced from main.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[40]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[80]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[81]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[82]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[83]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[84]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA_ADC0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ADC0_Int_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ADC0_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA_ADC1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_DAC_Out_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA_Err_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA_I2C0_MRX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA_I2C0_MTX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA_I2C0_SRX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_I2C0_STX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA_SINC2_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA_SPI1_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA_SPI1_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA_UART_RX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA_UART_TX_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>Ext_Int0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>Ext_Int2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>Ext_Int3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Ext_Int4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Ext_Int5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Ext_Int6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>Ext_Int7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Flsh_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>GP_Tmr0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>GP_Tmr1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C0_Master_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C0_Slave_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PWM0_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PWM1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PWM2_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWMTRIP_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SINC2_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI1_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WDog_Tmr_Int_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_aducm360.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAdcResult
</UL>

<P><STRONG><a name="[44]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUtcDateTime
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTestData
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDateTimeValue
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDataRecord
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommand
</UL>

<P><STRONG><a name="[68]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLoggerTime
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLoggerPeriod
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLoggerLimits
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommand
</UL>

<P><STRONG><a name="[46]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLoggerTime
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLoggerPeriod
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLoggerLimits
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[4b]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTestData
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDateTimeValue
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDataRecord
</UL>

<P><STRONG><a name="[45]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[48]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[41]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[88]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[89]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[8a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[4d]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[4f]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[16]"></a>ADC0_Int_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.ADC0_Int_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC0_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC1_Int_Handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.ADC1_Int_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>Ext_Int1_Handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.Ext_Int1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ext_Int1_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateExtiState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>PinCS_Init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, pins.o(i.PinCS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinCS_Off
</UL>

<P><STRONG><a name="[51]"></a>PinCS_Off</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, pins.o(i.PinCS_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PinCS_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinCS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinSPI_Off
</UL>

<P><STRONG><a name="[54]"></a>PinMISO_Init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, pins.o(i.PinMISO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinMISO_Off
</UL>

<P><STRONG><a name="[53]"></a>PinMISO_Off</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, pins.o(i.PinMISO_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PinMISO_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinMISO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinSPI_Off
</UL>

<P><STRONG><a name="[56]"></a>PinMOSISCK_Init</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, pins.o(i.PinMOSISCK_Init))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinMOSISCK_Off
</UL>

<P><STRONG><a name="[55]"></a>PinMOSISCK_Off</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, pins.o(i.PinMOSISCK_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PinMOSISCK_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinMOSISCK_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinSPI_Off
</UL>

<P><STRONG><a name="[57]"></a>PinSPI_Off</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, pins.o(i.PinSPI_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PinSPI_Off &rArr; PinMOSISCK_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinMOSISCK_Off
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinMISO_Off
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinCS_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSpi_0
</UL>

<P><STRONG><a name="[1b]"></a>SPI0_Int_Handler</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, main.o(i.SPI0_Int_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SystemInitForLowPower</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system_aducm360.o(i.SystemInitForLowPower))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(.text)
</UL>
<P><STRONG><a name="[1a]"></a>UART_Int_Handler</STRONG> (Thumb, 232 bytes, Stack size 12 bytes, main.o(i.UART_Int_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Int_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WakeUp_Int_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, main.o(i.WakeUp_Int_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_aducm360.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>__0sprintf$6</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8b]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[64]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTestData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMessage
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLoggerPeriod
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLoggerLimits
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDateTimeValue
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDataRecord
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[8c]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[8d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[8e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[8f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[34]"></a>addrError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i.addrError))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>clrLoggerFlash</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.clrLoggerFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = clrLoggerFlash &rArr; sendMessage &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlashRegister
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMessage
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWriteEnable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWriteDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>cmdError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.cmdError))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>createDataRecord</STRONG> (Thumb, 386 bytes, Stack size 88 bytes, main.o(i.createDataRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = createDataRecord &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStartTransfer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLoggerData
</UL>

<P><STRONG><a name="[70]"></a>disableADC</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, boardinit.o(i.disableADC))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeSensorData
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goToSleep
</UL>

<P><STRONG><a name="[65]"></a>disableSpi_0</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, boardinit.o(i.disableSpi_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disableSpi_0 &rArr; PinSPI_Off &rArr; PinMOSISCK_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinSPI_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeToFlash
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goToSleep
</UL>

<P><STRONG><a name="[6f]"></a>disableUART</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, boardinit.o(i.disableUART))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goToSleep
</UL>

<P><STRONG><a name="[77]"></a>enableADC</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, boardinit.o(i.enableADC))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeSensorData
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>enableSpi_0</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, boardinit.o(i.enableSpi_0))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeToFlash
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>enableUART</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, boardinit.o(i.enableUART))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>executeCommand</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, main.o(i.executeCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = executeCommand &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>flashWriteDisable</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, main.o(i.flashWriteDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flashWriteDisable &rArr; writeFlashRegister &rArr; spiStartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlashRegister
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlashRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeToFlash
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrLoggerFlash
</UL>

<P><STRONG><a name="[5d]"></a>flashWriteEnable</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, main.o(i.flashWriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flashWriteEnable &rArr; writeFlashRegister &rArr; spiStartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlashRegister
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlashRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeToFlash
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrLoggerFlash
</UL>

<P><STRONG><a name="[6a]"></a>getAdcResult</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, main.o(i.getAdcResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = getAdcResult &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeSensorData
</UL>

<P><STRONG><a name="[6b]"></a>getDateTimeValue</STRONG> (Thumb, 66 bytes, Stack size 80 bytes, main.o(i.getDateTimeValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = getDateTimeValue &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLoggerTime
</UL>

<P><STRONG><a name="[38]"></a>getLoggerData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.getLoggerData))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = getLoggerData &rArr; createDataRecord &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendPacket
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDataRecord
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>getLoggerLimits</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.getLoggerLimits))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getLoggerLimits &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendPacket
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>getLoggerPeriod</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.getLoggerPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = getLoggerPeriod &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendPacket
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>getLoggerTime</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.getLoggerTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = getLoggerTime &rArr; getDateTimeValue &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendPacket
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getDateTimeValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>getTemperature</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, main.o(i.getTemperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = getTemperature &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeSensorData
</UL>

<P><STRONG><a name="[6e]"></a>goToSleep</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(i.goToSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = goToSleep &rArr; disableSpi_0 &rArr; PinSPI_Off &rArr; PinMOSISCK_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableUART
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSpi_0
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableADC
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>initADC</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, boardinit.o(i.initADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initADC
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>initCorePin</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, boardinit.o(i.initCorePin))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>initRtcWakeUpTimer2</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, boardinit.o(i.initRtcWakeUpTimer2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initRtcWakeUpTimer2
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>initSpi_0</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, boardinit.o(i.initSpi_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initSpi_0
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>initSysTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, boardinit.o(i.initSysTick))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>initUART</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, boardinit.o(i.initUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initUART
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>main</STRONG> (Thumb, 410 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = main &rArr; storeSensorData &rArr; getAdcResult &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSysTick
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSpi_0
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRtcWakeUpTimer2
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCorePin
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initADC
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableUART
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSpi_0
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableADC
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSpi_0
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableADC
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendPacket
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeToFlash
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeSensorData
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUtcDateTime
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTestData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMessage
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;goToSleep
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommand
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDataRecord
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[69]"></a>readFlashRegister</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, main.o(i.readFlashRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = readFlashRegister &rArr; spiStartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStartTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWriteEnable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWriteDisable
</UL>

<P><STRONG><a name="[3f]"></a>resetTestMode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.resetTestMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = resetTestMode &rArr; sendMessage &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>sendMessage</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.sendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sendMessage &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendPacket
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTestMode
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLoggerTime
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLoggerPeriod
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLoggerLimits
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetTestMode
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrLoggerFlash
</UL>

<P><STRONG><a name="[7e]"></a>sendTestData</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, main.o(i.sendTestData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sendTestData &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartSendPacket
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>setLoggerLimits</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, main.o(i.setLoggerLimits))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = setLoggerLimits &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMessage
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>setLoggerPeriod</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, main.o(i.setLoggerPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = setLoggerPeriod &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMessage
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>setLoggerTime</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, main.o(i.setLoggerTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = setLoggerTime &rArr; setUtcDateTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUtcDateTime
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMessage
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>setTestMode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.setTestMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setTestMode &rArr; sendMessage &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>setUtcDateTime</STRONG> (Thumb, 56 bytes, Stack size 80 bytes, main.o(i.setUtcDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = setUtcDateTime &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLoggerTime
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>spiStartTransfer</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, main.o(i.spiStartTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spiStartTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeFlashRegister
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeToFlash
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFlashRegister
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createDataRecord
</UL>

<P><STRONG><a name="[7c]"></a>storeSensorData</STRONG> (Thumb, 402 bytes, Stack size 8 bytes, main.o(i.storeSensorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = storeSensorData &rArr; getAdcResult &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableADC
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableADC
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTemperature
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAdcResult
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>storeToFlash</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.storeToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = storeToFlash &rArr; flashWriteEnable &rArr; writeFlashRegister &rArr; spiStartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSpi_0
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSpi_0
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStartTransfer
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWriteEnable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWriteDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>uartSendPacket</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.uartSendPacket))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendTestData
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMessage
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLoggerTime
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLoggerPeriod
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLoggerLimits
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLoggerData
</UL>

<P><STRONG><a name="[50]"></a>updateExtiState</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, boardinit.o(i.updateExtiState))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ext_Int1_Handler
</UL>

<P><STRONG><a name="[5e]"></a>writeFlashRegister</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, main.o(i.writeFlashRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = writeFlashRegister &rArr; spiStartTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiStartTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWriteEnable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashWriteDisable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clrLoggerFlash
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[72]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, boardinit.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSpi_0
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRtcWakeUpTimer2
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initADC
</UL>

<P><STRONG><a name="[59]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[5c]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5a]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[33]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
